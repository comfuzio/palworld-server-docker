"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[261],{4503:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>c,contentTitle:()=>n,default:()=>a,frontMatter:()=>i,metadata:()=>l,toc:()=>h});var t=r(4848),d=r(8453);const i={sidebar_position:1,title:"Palworld Dedicated Server Settings",description:"How to change the Palworld Server Settings using Docker Environment variables.",keywords:["Palworld","palworld dedicated server","Palworld Dedicated server settings","palworld server settings","Palworld Docker Dedicated server settings","palworld Docker server settings"],image:"../../assets/Palworld_Banner.jpg",sidebar_label:"Server Settings"},n="Palworld Dedicated Server Settings",l={id:"getting-started/configuration/server-settings",title:"Palworld Dedicated Server Settings",description:"How to change the Palworld Server Settings using Docker Environment variables.",source:"@site/docs/getting-started/configuration/server-settings.md",sourceDirName:"getting-started/configuration",slug:"/getting-started/configuration/server-settings",permalink:"/getting-started/configuration/server-settings",draft:!1,unlisted:!1,editUrl:"https://github.com/thijsvanloef/palworld-server-docker/tree/main/docusaurus/docs/getting-started/configuration/server-settings.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Palworld Dedicated Server Settings",description:"How to change the Palworld Server Settings using Docker Environment variables.",keywords:["Palworld","palworld dedicated server","Palworld Dedicated server settings","palworld server settings","Palworld Docker Dedicated server settings","palworld Docker server settings"],image:"../../assets/Palworld_Banner.jpg",sidebar_label:"Server Settings"},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/category/configuration"},next:{title:"Game Settings",permalink:"/getting-started/configuration/game-settings"}},c={},h=[{value:"Environment variables",id:"environment-variables",level:2},{value:"Game Ports",id:"game-ports",level:3}];function o(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"palworld-dedicated-server-settings",children:"Palworld Dedicated Server Settings"}),"\n",(0,t.jsx)(s.p,{children:"How to change the Palworld Server Settings using Docker Environment variables."}),"\n",(0,t.jsx)(s.h2,{id:"environment-variables",children:"Environment variables"}),"\n",(0,t.jsx)(s.p,{children:"You can use the following values to change the settings of the server on boot.\nIt is highly recommended you set the following environment values before starting the server:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"PLAYERS"}),"\n",(0,t.jsx)(s.li,{children:"PORT"}),"\n",(0,t.jsx)(s.li,{children:"PUID"}),"\n",(0,t.jsx)(s.li,{children:"PGID"}),"\n"]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Variable"}),(0,t.jsx)(s.th,{children:"Info"}),(0,t.jsx)(s.th,{children:"Default Values"}),(0,t.jsx)(s.th,{children:"Allowed Values"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"TZ"}),(0,t.jsx)(s.td,{children:"Timezone used for time stamping backup server"}),(0,t.jsx)(s.td,{children:"UTC"}),(0,t.jsxs)(s.td,{children:["See ",(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#Time_Zone_abbreviations",children:"TZ Identifiers"})]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"PLAYERS*"}),(0,t.jsx)(s.td,{children:"Max amount of players that are able to join the server"}),(0,t.jsx)(s.td,{children:"16"}),(0,t.jsx)(s.td,{children:"1-32"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"PORT*"}),(0,t.jsx)(s.td,{children:"UDP port that the server will expose"}),(0,t.jsx)(s.td,{children:"8211"}),(0,t.jsx)(s.td,{children:"1024-65535"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"PUID*"}),(0,t.jsx)(s.td,{children:"The uid of the user the server should run as"}),(0,t.jsx)(s.td,{children:"1000"}),(0,t.jsx)(s.td,{children:"!0"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"PGID*"}),(0,t.jsx)(s.td,{children:"The gid of the group the server should run as"}),(0,t.jsx)(s.td,{children:"1000"}),(0,t.jsx)(s.td,{children:"!0"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"MULTITHREADING**"}),(0,t.jsx)(s.td,{children:"Improves performance in multi-threaded CPU environments. It is effective up to a maximum of about 4 threads, and allocating more than this number of threads does not make much sense."}),(0,t.jsx)(s.td,{children:"false"}),(0,t.jsx)(s.td,{children:"true/false"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"COMMUNITY"}),(0,t.jsx)(s.td,{children:"Whether or not the server shows up in the community server browser (USE WITH SERVER_PASSWORD)"}),(0,t.jsx)(s.td,{children:"false"}),(0,t.jsx)(s.td,{children:"true/false"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"PUBLIC_IP"}),(0,t.jsx)(s.td,{children:"You can manually specify the global IP address of the network on which the server running. If not specified, it will be detected automatically. If it does not work well, try manual configuration."}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:"x.x.x.x"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"PUBLIC_PORT"}),(0,t.jsx)(s.td,{children:"You can manually specify the port number of the network on which the server running. If not specified, it will be detected automatically. If it does not work well, try manual configuration."}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:"1024-65535"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"SERVER_NAME"}),(0,t.jsx)(s.td,{children:"A name for your server"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"SERVER_DESCRIPTION"}),(0,t.jsx)(s.td,{children:"Your server Description"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"SERVER_PASSWORD"}),(0,t.jsx)(s.td,{children:"Secure your community server with a password"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"ADMIN_PASSWORD"}),(0,t.jsx)(s.td,{children:"Secure administration access in the server with a password"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"UPDATE_ON_BOOT**"}),(0,t.jsx)(s.td,{children:"Update/Install the server when the docker container starts (THIS HAS TO BE ENABLED THE FIRST TIME YOU RUN THE CONTAINER)"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"true/false"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"RCON_ENABLED***"}),(0,t.jsx)(s.td,{children:"Enable RCON for the Palworld server"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"true/false"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"RCON_PORT"}),(0,t.jsx)(s.td,{children:"RCON port to connect to"}),(0,t.jsx)(s.td,{children:"25575"}),(0,t.jsx)(s.td,{children:"1024-65535"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"QUERY_PORT"}),(0,t.jsx)(s.td,{children:"Query port used to communicate with Steam servers"}),(0,t.jsx)(s.td,{children:"27015"}),(0,t.jsx)(s.td,{children:"1024-65535"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"BACKUP_CRON_EXPRESSION"}),(0,t.jsx)(s.td,{children:"Setting affects frequency of automatic backups."}),(0,t.jsx)(s.td,{children:"0 0 * * *"}),(0,t.jsxs)(s.td,{children:["Needs a Cron-Expression - See ",(0,t.jsx)(s.a,{href:"https://palworld-server-docker.loef.dev/guides/backup/automated-backup",children:"Configuring Automatic Backups with Cron"})]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"BACKUP_ENABLED"}),(0,t.jsx)(s.td,{children:"Enables automatic backups"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"true/false"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DELETE_OLD_BACKUPS"}),(0,t.jsx)(s.td,{children:"Delete backups after a certain number of days"}),(0,t.jsx)(s.td,{children:"false"}),(0,t.jsx)(s.td,{children:"true/false"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"OLD_BACKUP_DAYS"}),(0,t.jsx)(s.td,{children:"How many days to keep backups"}),(0,t.jsx)(s.td,{children:"30"}),(0,t.jsx)(s.td,{children:"any positive integer"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"AUTO_UPDATE_CRON_EXPRESSION"}),(0,t.jsx)(s.td,{children:"Setting affects frequency of automatic updates."}),(0,t.jsx)(s.td,{children:"0 * * * *"}),(0,t.jsxs)(s.td,{children:["Needs a Cron-Expression - See ",(0,t.jsx)(s.a,{href:"https://palworld-server-docker.loef.dev/guides/automatic-updates",children:"Configuring Automatic Updates with Cron"})]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"AUTO_UPDATE_ENABLED"}),(0,t.jsx)(s.td,{children:"Enables automatic updates"}),(0,t.jsx)(s.td,{children:"false"}),(0,t.jsx)(s.td,{children:"true/false"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"AUTO_UPDATE_WARN_MINUTES"}),(0,t.jsx)(s.td,{children:"How long to wait to update the server, after the player were informed. (This will be ignored, if no Players are connected)"}),(0,t.jsx)(s.td,{children:"30"}),(0,t.jsx)(s.td,{children:"Integer"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"AUTO_REBOOT_CRON_EXPRESSION"}),(0,t.jsx)(s.td,{children:"Setting affects frequency of automatic updates."}),(0,t.jsx)(s.td,{children:"0 0 * * *"}),(0,t.jsxs)(s.td,{children:["Needs a Cron-Expression - See ",(0,t.jsx)(s.a,{href:"https://palworld-server-docker.loef.dev/guides/automatic-reboots",children:"Configuring Automatic Reboots with Cron"})]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"AUTO_REBOOT_ENABLED"}),(0,t.jsx)(s.td,{children:"Enables automatic reboots"}),(0,t.jsx)(s.td,{children:"false"}),(0,t.jsx)(s.td,{children:"true/false"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"AUTO_REBOOT_WARN_MINUTES"}),(0,t.jsx)(s.td,{children:"How long to wait to reboot the server, after the player were informed."}),(0,t.jsx)(s.td,{children:"5"}),(0,t.jsx)(s.td,{children:"Integer"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"AUTO_REBOOT_EVEN_IF_PLAYERS_ONLINE"}),(0,t.jsx)(s.td,{children:"Restart the Server even if there are players online."}),(0,t.jsx)(s.td,{children:"false"}),(0,t.jsx)(s.td,{children:"true/false"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"TARGET_MANIFEST_ID"}),(0,t.jsx)(s.td,{children:"Locks game version to corespond with Manfiest ID from Steam Download Depot."}),(0,t.jsx)(s.td,{}),(0,t.jsxs)(s.td,{children:["See ",(0,t.jsx)(s.a,{href:"https://palworld-server-docker.loef.dev/guides/pinning-game-version#version-to-manifest-id-table",children:"Manifest ID Table"})]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_WEBHOOK_URL"}),(0,t.jsx)(s.td,{children:"Discord webhook url found after creating a webhook on a discord server"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"https://discord.com/api/webhooks/<webhook_id>"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_CONNECT_TIMEOUT"}),(0,t.jsx)(s.td,{children:"Discord command initial connection timeout"}),(0,t.jsx)(s.td,{children:"30"}),(0,t.jsx)(s.td,{children:"!0"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_MAX_TIMEOUT"}),(0,t.jsx)(s.td,{children:"Discord total hook timeout"}),(0,t.jsx)(s.td,{children:"30"}),(0,t.jsx)(s.td,{children:"!0"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PRE_UPDATE_BOOT_MESSAGE"}),(0,t.jsx)(s.td,{children:"Discord message sent when server begins updating"}),(0,t.jsx)(s.td,{children:"Server is updating..."}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PRE_UPDATE_BOOT_MESSAGE_ENABLED"}),(0,t.jsx)(s.td,{children:"If the Discord message is enabled for this message"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"boolean"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PRE_UPDATE_BOOT_MESSAGE_URL"}),(0,t.jsx)(s.td,{children:"Discord Webhook URL for this message (if left empty will use DISCORD_WEBHOOK_URL)"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_POST_UPDATE_BOOT_MESSAGE"}),(0,t.jsx)(s.td,{children:"Discord message sent when server completes updating"}),(0,t.jsx)(s.td,{children:"Server update complete!"}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_POST_UPDATE_BOOT_MESSAGE_ENABLED"}),(0,t.jsx)(s.td,{children:"If the Discord message is enabled for this message"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"boolean"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_POST_UPDATE_BOOT_MESSAGE_URL"}),(0,t.jsx)(s.td,{children:"Discord Webhook URL for this message (if left empty will use DISCORD_WEBHOOK_URL)"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PRE_START_MESSAGE"}),(0,t.jsx)(s.td,{children:"Discord message sent when server begins to start"}),(0,t.jsx)(s.td,{children:"Server has been started!"}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PRE_START_MESSAGE_ENABLED"}),(0,t.jsx)(s.td,{children:"If the Discord message is enabled for this message"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"boolean"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PRE_START_MESSAGE_URL"}),(0,t.jsx)(s.td,{children:"Discord Webhook URL for this message (if left empty will use DISCORD_WEBHOOK_URL)"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PRE_SHUTDOWN_MESSAGE"}),(0,t.jsx)(s.td,{children:"Discord message sent when server begins to shutdown"}),(0,t.jsx)(s.td,{children:"Server is shutting down..."}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PRE_SHUTDOWN_MESSAGE_ENABLED"}),(0,t.jsx)(s.td,{children:"If the Discord message is enabled for this message"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"boolean"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PRE_SHUTDOWN_MESSAGE_URL"}),(0,t.jsx)(s.td,{children:"Discord Webhook URL for this message (if left empty will use DISCORD_WEBHOOK_URL)"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_POST_SHUTDOWN_MESSAGE"}),(0,t.jsx)(s.td,{children:"Discord message sent when server has stopped"}),(0,t.jsx)(s.td,{children:"Server is stopped!"}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_POST_SHUTDOWN_MESSAGE_ENABLED"}),(0,t.jsx)(s.td,{children:"If the Discord message is enabled for this message"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"boolean"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_POST_SHUTDOWN_MESSAGE_URL"}),(0,t.jsx)(s.td,{children:"Discord Webhook URL for this message (if left empty will use DISCORD_WEBHOOK_URL)"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PLAYER_JOIN_MESSAGE"}),(0,t.jsx)(s.td,{children:"Discord message sent when player joins the server"}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"\\${player_name}"})," has joined Palworld!"]}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PLAYER_JOIN_MESSAGE_ENABLED"}),(0,t.jsx)(s.td,{children:"If the Discord message is enabled for this message"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"boolean"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PLAYER_JOIN_MESSAGE_URL"}),(0,t.jsx)(s.td,{children:"Discord Webhook URL for this message (if left empty will use DISCORD_WEBHOOK_URL)"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PLAYER_LEAVE_MESSAGE"}),(0,t.jsx)(s.td,{children:"Discord message sent when player leaves the server"}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"\\${player_name}"})," has left Palworld."]}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PLAYER_LEAVE_MESSAGE_ENABLED"}),(0,t.jsx)(s.td,{children:"If the Discord message is enabled for this message"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"boolean"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PLAYER_LEAVE_MESSAGE_URL"}),(0,t.jsx)(s.td,{children:"Discord Webhook URL for this message (if left empty will use DISCORD_WEBHOOK_URL)"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PRE_BACKUP_MESSAGE"}),(0,t.jsx)(s.td,{children:"Discord message when starting to create a backup"}),(0,t.jsx)(s.td,{children:"Creating backup..."}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PRE_BACKUP_MESSAGE_ENABLED"}),(0,t.jsx)(s.td,{children:"If the Discord message is enabled for this message"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"boolean"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PRE_BACKUP_MESSAGE_URL"}),(0,t.jsx)(s.td,{children:"Discord Webhook URL for this message (if left empty will use DISCORD_WEBHOOK_URL)"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_POST_BACKUP_MESSAGE"}),(0,t.jsx)(s.td,{children:"Discord message when a backup has been made"}),(0,t.jsxs)(s.td,{children:["Backup created at ",(0,t.jsx)(s.code,{children:"\\${FILE_PATH}"})]}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_POST_BACKUP_MESSAGE_ENABLED"}),(0,t.jsx)(s.td,{children:"If the Discord message is enabled for this message"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"boolean"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_POST_BACKUP_MESSAGE_URL"}),(0,t.jsx)(s.td,{children:"Discord Webhook URL for this message (if left empty will use DISCORD_WEBHOOK_URL)"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PRE_BACKUP_DELETE_MESSAGE"}),(0,t.jsx)(s.td,{children:"Discord message when starting to remove older backups"}),(0,t.jsxs)(s.td,{children:["Removing backups older than ",(0,t.jsx)(s.code,{children:"\\${OLD_BACKUP_DAYS}"})," days"]}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PRE_BACKUP_DELETE_ENABLED"}),(0,t.jsx)(s.td,{children:"If the Discord message is enabled for this message"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"boolean"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_PRE_BACKUP_DELETE_URL"}),(0,t.jsx)(s.td,{children:"Discord Webhook URL for this message (if left empty will use DISCORD_WEBHOOK_URL)"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_POST_BACKUP_DELETE_MESSAGE"}),(0,t.jsx)(s.td,{children:"Discord message when successfully removed older backups"}),(0,t.jsxs)(s.td,{children:["Removed backups older than ",(0,t.jsx)(s.code,{children:"\\${OLD_BACKUP_DAYS}"})," days"]}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_POST_BACKUP_DELETE_ENABLED"}),(0,t.jsx)(s.td,{children:"If the Discord message is enabled for this message"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"boolean"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_POST_BACKUP_DELETE_URL"}),(0,t.jsx)(s.td,{children:"Discord Webhook URL for this message (if left empty will use DISCORD_WEBHOOK_URL)"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_ERR_BACKUP_DELETE_MESSAGE"}),(0,t.jsx)(s.td,{children:"Discord message when there has been an error removing older backups"}),(0,t.jsxs)(s.td,{children:["Unable to delete old backups, OLD_BACKUP_DAYS is not an integer. OLD_BACKUP_DAYS=",(0,t.jsx)(s.code,{children:"\\${OLD_BACKUP_DAYS}"})]}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_ERR_BACKUP_DELETE_ENABLED"}),(0,t.jsx)(s.td,{children:"If the Discord message is enabled for this message"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"boolean"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISCORD_ERR_BACKUP_DELETE_URL"}),(0,t.jsx)(s.td,{children:"Discord Webhook URL for this message (if left empty will use DISCORD_WEBHOOK_URL)"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{children:'"string"'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISABLE_GENERATE_SETTINGS"}),(0,t.jsx)(s.td,{children:"Whether to automatically generate the PalWorldSettings.ini"}),(0,t.jsx)(s.td,{children:"false"}),(0,t.jsx)(s.td,{children:"true/false"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DISABLE_GENERATE_ENGINE"}),(0,t.jsx)(s.td,{children:"Whether to automatically generate the Engine.ini"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"true/false"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"ENABLE_PLAYER_LOGGING"}),(0,t.jsx)(s.td,{children:"Enables Logging and announcing when players join and leave"}),(0,t.jsx)(s.td,{children:"true"}),(0,t.jsx)(s.td,{children:"true/false"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"PLAYER_LOGGING_POLL_PERIOD"}),(0,t.jsx)(s.td,{children:"Polling period (in seconds) to check for players who have joined or left"}),(0,t.jsx)(s.td,{children:"5"}),(0,t.jsx)(s.td,{children:"!0"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"ARM_COMPATIBILITY_MODE"}),(0,t.jsx)(s.td,{children:"Switches the compatibility layer from Box86 to QEMU when executing steamcmd for server updates. This setting is only applicable for ARM64 hosts."}),(0,t.jsx)(s.td,{children:"false"}),(0,t.jsx)(s.td,{children:"true/false"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"*highly recommended to set"}),"\n",(0,t.jsx)(s.p,{children:"** Make sure you know what you are doing when running this option enabled"}),"\n",(0,t.jsx)(s.p,{children:"*** Required for docker stop to save and gracefully close the server"}),"\n",(0,t.jsx)(s.h3,{id:"game-ports",children:"Game Ports"}),"\n",(0,t.jsx)(s.p,{children:"The server needs the following ports by default."}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Port"}),(0,t.jsx)(s.th,{children:"Info"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"8211"}),(0,t.jsx)(s.td,{children:"Game Port (UDP)"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"27015"}),(0,t.jsx)(s.td,{children:"Query Port (UDP)"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"25575"}),(0,t.jsx)(s.td,{children:"RCON Port (TCP)"})]})]})]})]})}function a(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>n,x:()=>l});var t=r(6540);const d={},i=t.createContext(d);function n(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:n(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);